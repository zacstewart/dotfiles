set nocompatible                                " turn off VI compatibility mode
call pathogen#infect()                          " load Pathogen bundles
call pathogen#helptags()
filetype plugin indent on                       " use filetype detection and load plugins and indent for them
set directory^=$HOME/.vim/.swp//                " centralize swp file location (trailing / is important)
runtime macros/matchit.vim
set hidden                                      " hide unsaved buffers instead of closing them

" Performance tweaks
set ttyfast
set lazyredraw

" Appearance
syntax on                                       " turn on syntax highlighting
set t_Co=256                                    " use 256 colors
set background=dark                             " dark background
colorscheme solarized

" Text formatting
set ai                                          " auto-indent
set si                                          " smart indentation
au! FileType python setl nosmartindent          " don't smart indent python
set expandtab                                   " use soft tabs
set softtabstop=2                               " that are 2 spaces wide
set shiftwidth=2                                " auto-indent and shift by 2 spaces
set tabstop=2                                   " make hard tabs appear 2 spaces when present
set list                                        " show non-printed chars
set listchars=tab:▸\ ,trail:·                   " specifically, tabs and trailing whitespace
set nowrap                                      " turn off line wrapping

" UI
set hlsearch                                    " highlight search terms
set mouse=a                                     " use mouse in all modes
set wildmode=longest,list,full                  " tab completeion: 1) bash-like, 2) list, 3) wildmenu
set wildmenu                                    " use wildmenu (3rd tab)
set wildignore+=/venv/*,*.pyc,.root             " don't wildmenu these
set number                                      " turn on line numbers
set cursorline                                  " highlight current line
set laststatus=2                                " always show statusline
set ruler                                       " and show the line and column number in it
set noshowmode                                  " but not mode
set clipboard=unnamed                           " use OS clipboard by default
set backspace=indent,eol,start                  " let me delete whitespace, damn it
set splitbelow                                  " make new splits appear below
set splitright                                  " make new vertical splits appear to the right
let g:netrw_liststyle=3                         " use tree display mode in Netwr

set tags=.git/tags                              " ctags

" Set cursor to a line in edit mode
if !has('nvim')
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    set ttymouse=xterm2                         " enable mouse control in tmux
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=0

" Custom key mapping
inoremap jj <Esc>
" How many times must I insert jJ:w?
inoremap jJ <Esc>
nnoremap <Leader>d :NERDTreeToggle<CR>
nnoremap X $x
" Make Y behave like D
nnoremap Y y$
" Tabularize
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a\/ :Tabularize /\/<CR>
vmap <Leader>a\/ :Tabularize /\/<CR>
nmap <Leader>a{ :Tabularize /{<CR>
vmap <Leader>a{ :Tabularize /{<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,\zs<CR>
vmap <Leader>a, :Tabularize /,\zs<CR>
nmap <Leader>a> :Tabularize /[=-]><CR>
vmap <Leader>a> :Tabularize /[=-]><CR>
nmap <Leader>a\| :Tabularize /\|<CR>
vmap <Leader>a\| :Tabularize /\|<CR>
" remove superfluous whitespace
map <Leader><Space> :%s/\s\+$//g<CR>
" Visual indent
vnoremap < <gv
vnoremap > >gv
nnoremap <Leader>t :Dispatch rspec %<CR>
nnoremap <Leader>g :GitGutterToggle<CR>

" Tmux-like navigation
nnoremap <silent> <C-w>c :tabnew<CR>
nnoremap <silent> <C-w>n :tabnext<CR>
nnoremap <silent> <C-w>p :tabprevious<CR>

nnoremap <silent> <C-N> :Dispatch git grep --no-color <C-R><C-W><CR>
nmap <silent> <C-d> <Plug>DashSearch

" ctrl-{a,e} for jumping to {begnning,end} of command mode line
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Get rid of search highlighting when done with it
nnoremap <silent> <C-h> :noh<CR>

" manually define filetypes
autocmd BufNewFile,BufRead  *.scss  set filetype=scss

function! FindFile()
  if !filereadable('.file-index')
    call ReindexFiles()
  endif


  if exists('$TMUX')
    let l:fzf = 'fzf-tmux'
  else
    let l:fzf = 'fzf'
  endif

  try
    let l:response = system('cat .file-index | ' . l:fzf . ' --expect enter,ctrl-v,ctrl-x')
  catch /Vim:Interrupt/
    redraw!
    return
  endtry

  redraw!

  let l:parts = split(l:response, "\n")
  if len(l:parts) < 2 | return | endif
  let l:cmd = l:parts[0]
  let l:file = l:parts[1]

  if l:cmd == "ctrl-v"
    execute ":vsplit " . l:file
  elseif l:cmd == "ctrl-x"
    execute ":split " . l:file
  else
    execute ":e " . l:file
  endif
endfunction

function! ReindexFiles()
  echo "Reindexing files..."
  let l:output = system('ag --nocolor --nogroup --ignore .git --ignore bower_components --ignore doc --ignore node_modules --ignore venv --hidden -l > .file-index')
  redraw!
  if v:shell_error
    echo "Couldn't index files: " . l:output
  else
    echo "Done"
  endif
endfunction

nnoremap <C-p> :call ReindexFiles()<CR>
nnoremap <C-p><C-p> :call FindFile()<CR>

let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 1
let g:go_auto_type_info = 1

if !exists('g:vdebug_options')
    let g:vdebug_options = {}
endif
let g:vdebug_options["break_on_open"] = 0
let g:vdebug_options["timeout"] = 60

let s:vimrc_local = $HOME . '/.vimrc.local'
if filereadable(s:vimrc_local)
  execute "source " . s:vimrc_local
endif
